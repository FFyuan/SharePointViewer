/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-08-03 17:34:38 UTC)
 * on 2015-08-10 at 13:54:51 UTC 
 * Modify at your own risk.
 */

package com.appspot.yuanx_sharepoint_viewer.sharepointviewer;

/**
 * Service definition for Sharepointviewer (v1).
 *
 * <p>
 * Sharepoint viewer API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link SharepointviewerRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Sharepointviewer extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
            com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
                    com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
            "You are currently running with version %s of google-api-client. " +
                    "You need at least version 1.15 of google-api-client to run version " +
                    "1.20.0 of the sharepointviewer library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://yuanx-sharepoint-viewer.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "sharepointviewer/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   * <p>
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport              HTTP transport, which should normally be:
   *                               <ul>
   *                               <li>Google App Engine:
   *                               {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *                               <li>Android: {@code newCompatibleTransport} from
   *                               {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *                               <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *                               </li>
   *                               </ul>
   * @param jsonFactory            JSON factory, which may be:
   *                               <ul>
   *                               <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *                               <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *                               <li>Android Honeycomb or higher:
   *                               {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *                               </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Sharepointviewer(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
                          com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Sharepointviewer(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the Comment collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sharepointviewer sharepointviewer = new Sharepointviewer(...);}
   *   {@code Sharepointviewer.Comment.List request = sharepointviewer.comment().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Comment comment() {
    return new Comment();
  }

  /**
   * The "comment" collection of methods.
   */
  public class Comment {

    /**
     * Delete the comment with the entityKey
     *
     * Create a request for the method "comment.delete".
     *
     * This request holds the parameters needed by the sharepointviewer server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param entityKey
     * @return the request
     */
    public Delete delete(String entityKey) throws java.io.IOException {
      Delete result = new Delete(entityKey);
      initialize(result);
      return result;
    }

    public class Delete extends SharepointviewerRequest<com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.CommentProtoEntityKey> {

      private static final String REST_PATH = "comment/delete/{entityKey}";

      /**
       * Delete the comment with the entityKey
       *
       * Create a request for the method "comment.delete".
       *
       * This request holds the parameters needed by the the sharepointviewer server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityKey
       * @since 1.13
       */
      protected Delete(String entityKey) {
        super(Sharepointviewer.this, "DELETE", REST_PATH, null, com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.CommentProtoEntityKey.class);
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
      }

      @Override
      public Delete setAlt(String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private String entityKey;

      /**

       */
      public String getEntityKey() {
        return entityKey;
      }

      public Delete setEntityKey(String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }

    /**
     * Update or insert a new comment
     *
     * Create a request for the method "comment.insert".
     *
     * This request holds the parameters needed by the sharepointviewer server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Comment}
     * @return the request
     */
    public Insert insert(com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Comment content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends SharepointviewerRequest<com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Comment> {

      private static final String REST_PATH = "comment/insert";

      /**
       * Update or insert a new comment
       *
       * Create a request for the method "comment.insert".
       *
       * This request holds the parameters needed by the the sharepointviewer server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Comment}
       * @since 1.13
       */
      protected Insert(com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Comment content) {
        super(Sharepointviewer.this, "POST", REST_PATH, content, com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Comment.class);
      }

      @Override
      public Insert setAlt(String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }

    /**
     * list all the comments under certain Sharepoint and belongs to the current user
     *
     * Create a request for the method "comment.list".
     *
     * This request holds the parameters needed by the sharepointviewer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @param sharepointKey
     * @return the request
     */
    public List list(String sharepointKey) throws java.io.IOException {
      List result = new List(sharepointKey);
      initialize(result);
      return result;
    }

    public class List extends SharepointviewerRequest<com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.CommentCollection> {

      private static final String REST_PATH = "comment/list/{sharepoint_key}";

      /**
       * list all the comments under certain Sharepoint and belongs to the current user
       *
       * Create a request for the method "comment.list".
       *
       * This request holds the parameters needed by the the sharepointviewer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param sharepointKey
       * @since 1.13
       */
      protected List(String sharepointKey) {
        super(Sharepointviewer.this, "GET", REST_PATH, null, com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.CommentCollection.class);
        this.sharepointKey = com.google.api.client.util.Preconditions.checkNotNull(sharepointKey, "Required parameter sharepointKey must be specified.");
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key("sharepoint_key")
      private String sharepointKey;

      /**

       */
      public String getSharepointKey() {
        return sharepointKey;
      }

      public List setSharepointKey(String sharepointKey) {
        this.sharepointKey = sharepointKey;
        return this;
      }

      @com.google.api.client.util.Key
      private String pageToken;

      /**

       */
      public String getPageToken() {
        return pageToken;
      }

      public List setPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private Long limit;

      /**

       */
      public Long getLimit() {
        return limit;
      }

      public List setLimit(Long limit) {
        this.limit = limit;
        return this;
      }

      @com.google.api.client.util.Key
      private String order;

      /**

       */
      public String getOrder() {
        return order;
      }

      public List setOrder(String order) {
        this.order = order;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

  }

  /**
   * An accessor for creating requests from the Sharepoint collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Sharepointviewer sharepointviewer = new Sharepointviewer(...);}
   *   {@code Sharepointviewer.Sharepoint.List request = sharepointviewer.sharepoint().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public Sharepoint sharepoint() {
    return new Sharepoint();
  }

  /**
   * The "sharepoint" collection of methods.
   */
  public class Sharepoint {

    /**
     * Delete the sharepoint with the entityKey, plus all the associated comments
     *
     * Create a request for the method "sharepoint.delete".
     *
     * This request holds the parameters needed by the sharepointviewer server.  After setting any
     * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
     *
     * @param entityKey
     * @return the request
     */
    public Delete delete(String entityKey) throws java.io.IOException {
      Delete result = new Delete(entityKey);
      initialize(result);
      return result;
    }

    public class Delete extends SharepointviewerRequest<com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.SharepointProtoEntityKey> {

      private static final String REST_PATH = "assignment/delete/{entityKey}";

      /**
       * Delete the sharepoint with the entityKey, plus all the associated comments
       *
       * Create a request for the method "sharepoint.delete".
       *
       * This request holds the parameters needed by the the sharepointviewer server.  After setting any
       * optional parameters, call the {@link Delete#execute()} method to invoke the remote operation.
       * <p> {@link
       * Delete#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param entityKey
       * @since 1.13
       */
      protected Delete(String entityKey) {
        super(Sharepointviewer.this, "DELETE", REST_PATH, null, com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.SharepointProtoEntityKey.class);
        this.entityKey = com.google.api.client.util.Preconditions.checkNotNull(entityKey, "Required parameter entityKey must be specified.");
      }

      @Override
      public Delete setAlt(String alt) {
        return (Delete) super.setAlt(alt);
      }

      @Override
      public Delete setFields(String fields) {
        return (Delete) super.setFields(fields);
      }

      @Override
      public Delete setKey(String key) {
        return (Delete) super.setKey(key);
      }

      @Override
      public Delete setOauthToken(String oauthToken) {
        return (Delete) super.setOauthToken(oauthToken);
      }

      @Override
      public Delete setPrettyPrint(Boolean prettyPrint) {
        return (Delete) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Delete setQuotaUser(String quotaUser) {
        return (Delete) super.setQuotaUser(quotaUser);
      }

      @Override
      public Delete setUserIp(String userIp) {
        return (Delete) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private String entityKey;

      /**

       */
      public String getEntityKey() {
        return entityKey;
      }

      public Delete setEntityKey(String entityKey) {
        this.entityKey = entityKey;
        return this;
      }

      @Override
      public Delete set(String parameterName, Object value) {
        return (Delete) super.set(parameterName, value);
      }
    }

    /**
     * Update or insert a new Sharepoint
     *
     * Create a request for the method "sharepoint.insert".
     *
     * This request holds the parameters needed by the sharepointviewer server.  After setting any
     * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
     *
     * @param content the {@link com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Sharepoint}
     * @return the request
     */
    public Insert insert(com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Sharepoint content) throws java.io.IOException {
      Insert result = new Insert(content);
      initialize(result);
      return result;
    }

    public class Insert extends SharepointviewerRequest<com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Sharepoint> {

      private static final String REST_PATH = "sharepoint/insert";

      /**
       * Update or insert a new Sharepoint
       *
       * Create a request for the method "sharepoint.insert".
       *
       * This request holds the parameters needed by the the sharepointviewer server.  After setting any
       * optional parameters, call the {@link Insert#execute()} method to invoke the remote operation.
       * <p> {@link
       * Insert#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @param content the {@link com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Sharepoint}
       * @since 1.13
       */
      protected Insert(com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Sharepoint content) {
        super(Sharepointviewer.this, "POST", REST_PATH, content, com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.Sharepoint.class);
      }

      @Override
      public Insert setAlt(String alt) {
        return (Insert) super.setAlt(alt);
      }

      @Override
      public Insert setFields(String fields) {
        return (Insert) super.setFields(fields);
      }

      @Override
      public Insert setKey(String key) {
        return (Insert) super.setKey(key);
      }

      @Override
      public Insert setOauthToken(String oauthToken) {
        return (Insert) super.setOauthToken(oauthToken);
      }

      @Override
      public Insert setPrettyPrint(Boolean prettyPrint) {
        return (Insert) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public Insert setQuotaUser(String quotaUser) {
        return (Insert) super.setQuotaUser(quotaUser);
      }

      @Override
      public Insert setUserIp(String userIp) {
        return (Insert) super.setUserIp(userIp);
      }

      @Override
      public Insert set(String parameterName, Object value) {
        return (Insert) super.set(parameterName, value);
      }
    }

    /**
     * list all the sharepoints belonged to the current user
     *
     * Create a request for the method "sharepoint.list".
     *
     * This request holds the parameters needed by the sharepointviewer server.  After setting any
     * optional parameters, call the {@link List#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public List list() throws java.io.IOException {
      List result = new List();
      initialize(result);
      return result;
    }

    public class List extends SharepointviewerRequest<com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.SharepointCollection> {

      private static final String REST_PATH = "sharepoint/list";

      /**
       * list all the sharepoints belonged to the current user
       *
       * Create a request for the method "sharepoint.list".
       *
       * This request holds the parameters needed by the the sharepointviewer server.  After setting any
       * optional parameters, call the {@link List#execute()} method to invoke the remote operation. <p>
       * {@link List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
       * must be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected List() {
        super(Sharepointviewer.this, "GET", REST_PATH, null, com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.SharepointCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public List setAlt(String alt) {
        return (List) super.setAlt(alt);
      }

      @Override
      public List setFields(String fields) {
        return (List) super.setFields(fields);
      }

      @Override
      public List setKey(String key) {
        return (List) super.setKey(key);
      }

      @Override
      public List setOauthToken(String oauthToken) {
        return (List) super.setOauthToken(oauthToken);
      }

      @Override
      public List setPrettyPrint(Boolean prettyPrint) {
        return (List) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public List setQuotaUser(String quotaUser) {
        return (List) super.setQuotaUser(quotaUser);
      }

      @Override
      public List setUserIp(String userIp) {
        return (List) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private String pageToken;

      /**

       */
      public String getPageToken() {
        return pageToken;
      }

      public List setPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private Long limit;

      /**

       */
      public Long getLimit() {
        return limit;
      }

      public List setLimit(Long limit) {
        this.limit = limit;
        return this;
      }

      @Override
      public List set(String parameterName, Object value) {
        return (List) super.set(parameterName, value);
      }
    }

    /**
     * list all the sharepoints in the server
     *
     * Create a request for the method "sharepoint.listAll".
     *
     * This request holds the parameters needed by the sharepointviewer server.  After setting any
     * optional parameters, call the {@link ListAll#execute()} method to invoke the remote operation.
     *
     * @return the request
     */
    public ListAll listAll() throws java.io.IOException {
      ListAll result = new ListAll();
      initialize(result);
      return result;
    }

    public class ListAll extends SharepointviewerRequest<com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.SharepointCollection> {

      private static final String REST_PATH = "sharepoint/listAll";

      /**
       * list all the sharepoints in the server
       *
       * Create a request for the method "sharepoint.listAll".
       *
       * This request holds the parameters needed by the the sharepointviewer server.  After setting any
       * optional parameters, call the {@link ListAll#execute()} method to invoke the remote operation.
       * <p> {@link
       * ListAll#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
       * be called to initialize this instance immediately after invoking the constructor. </p>
       *
       * @since 1.13
       */
      protected ListAll() {
        super(Sharepointviewer.this, "GET", REST_PATH, null, com.appspot.yuanx_sharepoint_viewer.sharepointviewer.model.SharepointCollection.class);
      }

      @Override
      public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
        return super.executeUsingHead();
      }

      @Override
      public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
        return super.buildHttpRequestUsingHead();
      }

      @Override
      public ListAll setAlt(String alt) {
        return (ListAll) super.setAlt(alt);
      }

      @Override
      public ListAll setFields(String fields) {
        return (ListAll) super.setFields(fields);
      }

      @Override
      public ListAll setKey(String key) {
        return (ListAll) super.setKey(key);
      }

      @Override
      public ListAll setOauthToken(String oauthToken) {
        return (ListAll) super.setOauthToken(oauthToken);
      }

      @Override
      public ListAll setPrettyPrint(Boolean prettyPrint) {
        return (ListAll) super.setPrettyPrint(prettyPrint);
      }

      @Override
      public ListAll setQuotaUser(String quotaUser) {
        return (ListAll) super.setQuotaUser(quotaUser);
      }

      @Override
      public ListAll setUserIp(String userIp) {
        return (ListAll) super.setUserIp(userIp);
      }

      @com.google.api.client.util.Key
      private String pageToken;

      /**

       */
      public String getPageToken() {
        return pageToken;
      }

      public ListAll setPageToken(String pageToken) {
        this.pageToken = pageToken;
        return this;
      }

      @com.google.api.client.util.Key
      private Long limit;

      /**

       */
      public Long getLimit() {
        return limit;
      }

      public ListAll setLimit(Long limit) {
        this.limit = limit;
        return this;
      }

      @Override
      public ListAll set(String parameterName, Object value) {
        return (ListAll) super.set(parameterName, value);
      }
    }

  }

  /**
   * Builder for {@link Sharepointviewer}.
   * <p>
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
                   com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
              transport,
              jsonFactory,
              DEFAULT_ROOT_URL,
              DEFAULT_SERVICE_PATH,
              httpRequestInitializer,
              false);
    }

    /**
     * Builds a new instance of {@link Sharepointviewer}.
     */
    @Override
    public Sharepointviewer build() {
      return new Sharepointviewer(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link SharepointviewerRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setSharepointviewerRequestInitializer(
        SharepointviewerRequestInitializer sharepointviewerRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(sharepointviewerRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
